{"message":"unused variable: `y`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src/binary/tests.rs","byte_start":604,"byte_end":609,"line_start":37,"line_end":37,"column_start":7,"column_end":12,"is_primary":true,"text":[{"text":"\t\tlet mut y : u16 = 0;","highlight_start":7,"highlight_end":12}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_variables)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"src/binary/tests.rs","byte_start":604,"byte_end":609,"line_start":37,"line_end":37,"column_start":7,"column_end":12,"is_primary":true,"text":[{"text":"\t\tlet mut y : u16 = 0;","highlight_start":7,"highlight_end":12}],"label":null,"suggested_replacement":"_y","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `y`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/binary/tests.rs:37:7\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m37\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        let mut y : u16 = 0;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_y`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_variables)]` on by default\u001b[0m\n\n"}
{"message":"value assigned to `got` is never read","code":{"code":"unused_assignments","explanation":null},"level":"warning","spans":[{"file_name":"src/binary/tests.rs","byte_start":937,"byte_end":944,"line_start":54,"line_end":54,"column_start":7,"column_end":14,"is_primary":true,"text":[{"text":"\t\tlet mut got : usize = 0;","highlight_start":7,"highlight_end":14}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_assignments)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"maybe it is overwritten before being read?","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: value assigned to `got` is never read\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/binary/tests.rs:54:7\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m54\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        let mut got : usize = 0;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_assignments)]` on by default\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: maybe it is overwritten before being read?\u001b[0m\n\n"}
{"message":"unused variable: `x`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src/vector/native/algebraic.rs","byte_start":1087,"byte_end":1088,"line_start":43,"line_end":43,"column_start":18,"column_end":19,"is_primary":true,"text":[{"text":"    fn div(self, x : &NativeVector ) -> NativeVector{","highlight_start":18,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"src/vector/native/algebraic.rs","byte_start":1087,"byte_end":1088,"line_start":43,"line_end":43,"column_start":18,"column_end":19,"is_primary":true,"text":[{"text":"    fn div(self, x : &NativeVector ) -> NativeVector{","highlight_start":18,"highlight_end":19}],"label":null,"suggested_replacement":"_x","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `x`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/vector/native/algebraic.rs:43:18\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m43\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    fn div(self, x : &NativeVector ) -> NativeVector{\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_x`\u001b[0m\n\n"}
{"message":"variable does not need to be mutable","code":{"code":"unused_mut","explanation":null},"level":"warning","spans":[{"file_name":"src/binary/tests.rs","byte_start":604,"byte_end":609,"line_start":37,"line_end":37,"column_start":7,"column_end":12,"is_primary":true,"text":[{"text":"\t\tlet mut y : u16 = 0;","highlight_start":7,"highlight_end":12}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_mut)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this `mut`","code":null,"level":"help","spans":[{"file_name":"src/binary/tests.rs","byte_start":604,"byte_end":608,"line_start":37,"line_end":37,"column_start":7,"column_end":11,"is_primary":true,"text":[{"text":"\t\tlet mut y : u16 = 0;","highlight_start":7,"highlight_end":11}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable does not need to be mutable\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/binary/tests.rs:37:7\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m37\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        let mut y : u16 = 0;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----\u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: remove this `mut`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_mut)]` on by default\u001b[0m\n\n"}
{"message":"allocations are not allowed in statics","code":{"code":"E0010","explanation":"The value of statics and constants must be known at compile time, and they live\nfor the entire lifetime of a program. Creating a boxed value allocates memory on\nthe heap at runtime, and therefore cannot be done at compile time.\n\nErroneous code example:\n\n```compile_fail,E0010\n#![feature(box_syntax)]\n\nconst CON : Box<i32> = box 0;\n```\n"},"level":"error","spans":[{"file_name":"/home/max/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src/liballoc/macros.rs","byte_start":1408,"byte_end":1421,"line_start":46,"line_end":46,"column_start":25,"column_end":38,"is_primary":true,"text":[{"text":"        <[_]>::into_vec(box [$($x),+])","highlight_start":25,"highlight_end":38}],"label":"allocation not allowed in statics","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/vector/native/tests.rs","byte_start":110,"byte_end":126,"line_start":6,"line_end":6,"column_start":24,"column_end":40,"is_primary":false,"text":[{"text":"\t\tNativeVector{vector: vec![1, 1, 0, 1]},","highlight_start":24,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"vec!","def_site_span":{"file_name":"/home/max/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src/liballoc/macros.rs","byte_start":1204,"byte_end":1431,"line_start":38,"line_end":48,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! vec {","highlight_start":1,"highlight_end":1},{"text":"    () => (","highlight_start":1,"highlight_end":1},{"text":"        $crate::vec::Vec::new()","highlight_start":1,"highlight_end":1},{"text":"    );","highlight_start":1,"highlight_end":1},{"text":"    ($elem:expr; $n:expr) => (","highlight_start":1,"highlight_end":1},{"text":"        $crate::vec::from_elem($elem, $n)","highlight_start":1,"highlight_end":1},{"text":"    );","highlight_start":1,"highlight_end":1},{"text":"    ($($x:expr),+ $(,)?) => (","highlight_start":1,"highlight_end":1},{"text":"        <[_]>::into_vec(box [$($x),+])","highlight_start":1,"highlight_end":1},{"text":"    );","highlight_start":1,"highlight_end":1},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0010]\u001b[0m\u001b[0m\u001b[1m: allocations are not allowed in statics\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/vector/native/tests.rs:6:24\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m6\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        NativeVector{vector: vec![1, 1, 0, 1]},\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mallocation not allowed in statics\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"static contains unimplemented expression type","code":{"code":"E0019","explanation":"A function call isn't allowed in the const's initialization expression\nbecause the expression's value must be known at compile-time.\n\nErroneous code example:\n\n```compile_fail,E0019\n#![feature(box_syntax)]\n\nfn main() {\n    struct MyOwned;\n\n    static STATIC11: Box<MyOwned> = box MyOwned; // error!\n}\n```\n\nRemember: you can't use a function call inside a const's initialization\nexpression! However, you can totally use it anywhere else:\n\n```\nenum Test {\n    V1\n}\n\nimpl Test {\n    fn func(&self) -> i32 {\n        12\n    }\n}\n\nfn main() {\n    const FOO: Test = Test::V1;\n\n    FOO.func(); // here is good\n    let x = FOO.func(); // or even here!\n}\n```\n"},"level":"error","spans":[{"file_name":"/home/max/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src/liballoc/macros.rs","byte_start":1412,"byte_end":1421,"line_start":46,"line_end":46,"column_start":29,"column_end":38,"is_primary":true,"text":[{"text":"        <[_]>::into_vec(box [$($x),+])","highlight_start":29,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/vector/native/tests.rs","byte_start":110,"byte_end":126,"line_start":6,"line_end":6,"column_start":24,"column_end":40,"is_primary":false,"text":[{"text":"\t\tNativeVector{vector: vec![1, 1, 0, 1]},","highlight_start":24,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"vec!","def_site_span":{"file_name":"/home/max/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src/liballoc/macros.rs","byte_start":1204,"byte_end":1431,"line_start":38,"line_end":48,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! vec {","highlight_start":1,"highlight_end":19},{"text":"    () => (","highlight_start":1,"highlight_end":12},{"text":"        $crate::vec::Vec::new()","highlight_start":1,"highlight_end":32},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    ($elem:expr; $n:expr) => (","highlight_start":1,"highlight_end":31},{"text":"        $crate::vec::from_elem($elem, $n)","highlight_start":1,"highlight_end":42},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    ($($x:expr),+ $(,)?) => (","highlight_start":1,"highlight_end":30},{"text":"        <[_]>::into_vec(box [$($x),+])","highlight_start":1,"highlight_end":39},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"add `#![feature(const_mut_refs)]` to the crate attributes to enable","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0019]\u001b[0m\u001b[0m\u001b[1m: static contains unimplemented expression type\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/vector/native/tests.rs:6:24\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m6\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        NativeVector{vector: vec![1, 1, 0, 1]},\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: add `#![feature(const_mut_refs)]` to the crate attributes to enable\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"calls in statics are limited to constant functions, tuple structs and tuple variants","code":{"code":"E0015","explanation":"A constant item was initialized with something that is not a constant\nexpression.\n\nErroneous code example:\n\n```compile_fail,E0015\nfn create_some() -> Option<u8> {\n    Some(1)\n}\n\nconst FOO: Option<u8> = create_some(); // error!\n```\n\nThe only functions that can be called in static or constant expressions are\n`const` functions, and struct/enum constructors.\n\nTo fix this error, you can declare `create_some` as a constant function:\n\n```\nconst fn create_some() -> Option<u8> { // declared as a const function\n    Some(1)\n}\n\nconst FOO: Option<u8> = create_some(); // ok!\n\n// These are also working:\nstruct Bar {\n    x: u8,\n}\n\nconst OTHER_FOO: Option<u8> = Some(1);\nconst BAR: Bar = Bar {x: 1};\n```\n"},"level":"error","spans":[{"file_name":"/home/max/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src/liballoc/macros.rs","byte_start":1392,"byte_end":1422,"line_start":46,"line_end":46,"column_start":9,"column_end":39,"is_primary":true,"text":[{"text":"        <[_]>::into_vec(box [$($x),+])","highlight_start":9,"highlight_end":39}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/vector/native/tests.rs","byte_start":110,"byte_end":126,"line_start":6,"line_end":6,"column_start":24,"column_end":40,"is_primary":false,"text":[{"text":"\t\tNativeVector{vector: vec![1, 1, 0, 1]},","highlight_start":24,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"vec!","def_site_span":{"file_name":"/home/max/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src/liballoc/macros.rs","byte_start":1204,"byte_end":1431,"line_start":38,"line_end":48,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! vec {","highlight_start":1,"highlight_end":19},{"text":"    () => (","highlight_start":1,"highlight_end":12},{"text":"        $crate::vec::Vec::new()","highlight_start":1,"highlight_end":32},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    ($elem:expr; $n:expr) => (","highlight_start":1,"highlight_end":31},{"text":"        $crate::vec::from_elem($elem, $n)","highlight_start":1,"highlight_end":42},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    ($($x:expr),+ $(,)?) => (","highlight_start":1,"highlight_end":30},{"text":"        <[_]>::into_vec(box [$($x),+])","highlight_start":1,"highlight_end":39},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0015]\u001b[0m\u001b[0m\u001b[1m: calls in statics are limited to constant functions, tuple structs and tuple variants\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/vector/native/tests.rs:6:24\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m6\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        NativeVector{vector: vec![1, 1, 0, 1]},\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"allocations are not allowed in statics","code":{"code":"E0010","explanation":"The value of statics and constants must be known at compile time, and they live\nfor the entire lifetime of a program. Creating a boxed value allocates memory on\nthe heap at runtime, and therefore cannot be done at compile time.\n\nErroneous code example:\n\n```compile_fail,E0010\n#![feature(box_syntax)]\n\nconst CON : Box<i32> = box 0;\n```\n"},"level":"error","spans":[{"file_name":"/home/max/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src/liballoc/macros.rs","byte_start":1408,"byte_end":1421,"line_start":46,"line_end":46,"column_start":25,"column_end":38,"is_primary":true,"text":[{"text":"        <[_]>::into_vec(box [$($x),+])","highlight_start":25,"highlight_end":38}],"label":"allocation not allowed in statics","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/vector/native/tests.rs","byte_start":152,"byte_end":171,"line_start":7,"line_end":7,"column_start":24,"column_end":43,"is_primary":false,"text":[{"text":"\t\tNativeVector{vector: vec![1, 1, 0, 1, 1]},","highlight_start":24,"highlight_end":43}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"vec!","def_site_span":{"file_name":"/home/max/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src/liballoc/macros.rs","byte_start":1204,"byte_end":1431,"line_start":38,"line_end":48,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! vec {","highlight_start":1,"highlight_end":19},{"text":"    () => (","highlight_start":1,"highlight_end":12},{"text":"        $crate::vec::Vec::new()","highlight_start":1,"highlight_end":32},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    ($elem:expr; $n:expr) => (","highlight_start":1,"highlight_end":31},{"text":"        $crate::vec::from_elem($elem, $n)","highlight_start":1,"highlight_end":42},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    ($($x:expr),+ $(,)?) => (","highlight_start":1,"highlight_end":30},{"text":"        <[_]>::into_vec(box [$($x),+])","highlight_start":1,"highlight_end":39},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0010]\u001b[0m\u001b[0m\u001b[1m: allocations are not allowed in statics\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/vector/native/tests.rs:7:24\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        NativeVector{vector: vec![1, 1, 0, 1, 1]},\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mallocation not allowed in statics\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"static contains unimplemented expression type","code":{"code":"E0019","explanation":"A function call isn't allowed in the const's initialization expression\nbecause the expression's value must be known at compile-time.\n\nErroneous code example:\n\n```compile_fail,E0019\n#![feature(box_syntax)]\n\nfn main() {\n    struct MyOwned;\n\n    static STATIC11: Box<MyOwned> = box MyOwned; // error!\n}\n```\n\nRemember: you can't use a function call inside a const's initialization\nexpression! However, you can totally use it anywhere else:\n\n```\nenum Test {\n    V1\n}\n\nimpl Test {\n    fn func(&self) -> i32 {\n        12\n    }\n}\n\nfn main() {\n    const FOO: Test = Test::V1;\n\n    FOO.func(); // here is good\n    let x = FOO.func(); // or even here!\n}\n```\n"},"level":"error","spans":[{"file_name":"/home/max/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src/liballoc/macros.rs","byte_start":1412,"byte_end":1421,"line_start":46,"line_end":46,"column_start":29,"column_end":38,"is_primary":true,"text":[{"text":"        <[_]>::into_vec(box [$($x),+])","highlight_start":29,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/vector/native/tests.rs","byte_start":152,"byte_end":171,"line_start":7,"line_end":7,"column_start":24,"column_end":43,"is_primary":false,"text":[{"text":"\t\tNativeVector{vector: vec![1, 1, 0, 1, 1]},","highlight_start":24,"highlight_end":43}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"vec!","def_site_span":{"file_name":"/home/max/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src/liballoc/macros.rs","byte_start":1204,"byte_end":1431,"line_start":38,"line_end":48,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! vec {","highlight_start":1,"highlight_end":19},{"text":"    () => (","highlight_start":1,"highlight_end":12},{"text":"        $crate::vec::Vec::new()","highlight_start":1,"highlight_end":32},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    ($elem:expr; $n:expr) => (","highlight_start":1,"highlight_end":31},{"text":"        $crate::vec::from_elem($elem, $n)","highlight_start":1,"highlight_end":42},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    ($($x:expr),+ $(,)?) => (","highlight_start":1,"highlight_end":30},{"text":"        <[_]>::into_vec(box [$($x),+])","highlight_start":1,"highlight_end":39},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"add `#![feature(const_mut_refs)]` to the crate attributes to enable","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0019]\u001b[0m\u001b[0m\u001b[1m: static contains unimplemented expression type\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/vector/native/tests.rs:7:24\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        NativeVector{vector: vec![1, 1, 0, 1, 1]},\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: add `#![feature(const_mut_refs)]` to the crate attributes to enable\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"calls in statics are limited to constant functions, tuple structs and tuple variants","code":{"code":"E0015","explanation":"A constant item was initialized with something that is not a constant\nexpression.\n\nErroneous code example:\n\n```compile_fail,E0015\nfn create_some() -> Option<u8> {\n    Some(1)\n}\n\nconst FOO: Option<u8> = create_some(); // error!\n```\n\nThe only functions that can be called in static or constant expressions are\n`const` functions, and struct/enum constructors.\n\nTo fix this error, you can declare `create_some` as a constant function:\n\n```\nconst fn create_some() -> Option<u8> { // declared as a const function\n    Some(1)\n}\n\nconst FOO: Option<u8> = create_some(); // ok!\n\n// These are also working:\nstruct Bar {\n    x: u8,\n}\n\nconst OTHER_FOO: Option<u8> = Some(1);\nconst BAR: Bar = Bar {x: 1};\n```\n"},"level":"error","spans":[{"file_name":"/home/max/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src/liballoc/macros.rs","byte_start":1392,"byte_end":1422,"line_start":46,"line_end":46,"column_start":9,"column_end":39,"is_primary":true,"text":[{"text":"        <[_]>::into_vec(box [$($x),+])","highlight_start":9,"highlight_end":39}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/vector/native/tests.rs","byte_start":152,"byte_end":171,"line_start":7,"line_end":7,"column_start":24,"column_end":43,"is_primary":false,"text":[{"text":"\t\tNativeVector{vector: vec![1, 1, 0, 1, 1]},","highlight_start":24,"highlight_end":43}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"vec!","def_site_span":{"file_name":"/home/max/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src/liballoc/macros.rs","byte_start":1204,"byte_end":1431,"line_start":38,"line_end":48,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! vec {","highlight_start":1,"highlight_end":19},{"text":"    () => (","highlight_start":1,"highlight_end":12},{"text":"        $crate::vec::Vec::new()","highlight_start":1,"highlight_end":32},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    ($elem:expr; $n:expr) => (","highlight_start":1,"highlight_end":31},{"text":"        $crate::vec::from_elem($elem, $n)","highlight_start":1,"highlight_end":42},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    ($($x:expr),+ $(,)?) => (","highlight_start":1,"highlight_end":30},{"text":"        <[_]>::into_vec(box [$($x),+])","highlight_start":1,"highlight_end":39},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0015]\u001b[0m\u001b[0m\u001b[1m: calls in statics are limited to constant functions, tuple structs and tuple variants\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/vector/native/tests.rs:7:24\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        NativeVector{vector: vec![1, 1, 0, 1, 1]},\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"allocations are not allowed in statics","code":{"code":"E0010","explanation":"The value of statics and constants must be known at compile time, and they live\nfor the entire lifetime of a program. Creating a boxed value allocates memory on\nthe heap at runtime, and therefore cannot be done at compile time.\n\nErroneous code example:\n\n```compile_fail,E0010\n#![feature(box_syntax)]\n\nconst CON : Box<i32> = box 0;\n```\n"},"level":"error","spans":[{"file_name":"/home/max/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src/liballoc/macros.rs","byte_start":1408,"byte_end":1421,"line_start":46,"line_end":46,"column_start":25,"column_end":38,"is_primary":true,"text":[{"text":"        <[_]>::into_vec(box [$($x),+])","highlight_start":25,"highlight_end":38}],"label":"allocation not allowed in statics","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/vector/native/tests.rs","byte_start":197,"byte_end":222,"line_start":8,"line_end":8,"column_start":24,"column_end":49,"is_primary":false,"text":[{"text":"\t\tNativeVector{vector: vec![1, 0, 1, 0, 1, 0, 1]},","highlight_start":24,"highlight_end":49}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"vec!","def_site_span":{"file_name":"/home/max/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src/liballoc/macros.rs","byte_start":1204,"byte_end":1431,"line_start":38,"line_end":48,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! vec {","highlight_start":1,"highlight_end":19},{"text":"    () => (","highlight_start":1,"highlight_end":12},{"text":"        $crate::vec::Vec::new()","highlight_start":1,"highlight_end":32},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    ($elem:expr; $n:expr) => (","highlight_start":1,"highlight_end":31},{"text":"        $crate::vec::from_elem($elem, $n)","highlight_start":1,"highlight_end":42},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    ($($x:expr),+ $(,)?) => (","highlight_start":1,"highlight_end":30},{"text":"        <[_]>::into_vec(box [$($x),+])","highlight_start":1,"highlight_end":39},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0010]\u001b[0m\u001b[0m\u001b[1m: allocations are not allowed in statics\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/vector/native/tests.rs:8:24\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m8\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        NativeVector{vector: vec![1, 0, 1, 0, 1, 0, 1]},\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mallocation not allowed in statics\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"static contains unimplemented expression type","code":{"code":"E0019","explanation":"A function call isn't allowed in the const's initialization expression\nbecause the expression's value must be known at compile-time.\n\nErroneous code example:\n\n```compile_fail,E0019\n#![feature(box_syntax)]\n\nfn main() {\n    struct MyOwned;\n\n    static STATIC11: Box<MyOwned> = box MyOwned; // error!\n}\n```\n\nRemember: you can't use a function call inside a const's initialization\nexpression! However, you can totally use it anywhere else:\n\n```\nenum Test {\n    V1\n}\n\nimpl Test {\n    fn func(&self) -> i32 {\n        12\n    }\n}\n\nfn main() {\n    const FOO: Test = Test::V1;\n\n    FOO.func(); // here is good\n    let x = FOO.func(); // or even here!\n}\n```\n"},"level":"error","spans":[{"file_name":"/home/max/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src/liballoc/macros.rs","byte_start":1412,"byte_end":1421,"line_start":46,"line_end":46,"column_start":29,"column_end":38,"is_primary":true,"text":[{"text":"        <[_]>::into_vec(box [$($x),+])","highlight_start":29,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/vector/native/tests.rs","byte_start":197,"byte_end":222,"line_start":8,"line_end":8,"column_start":24,"column_end":49,"is_primary":false,"text":[{"text":"\t\tNativeVector{vector: vec![1, 0, 1, 0, 1, 0, 1]},","highlight_start":24,"highlight_end":49}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"vec!","def_site_span":{"file_name":"/home/max/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src/liballoc/macros.rs","byte_start":1204,"byte_end":1431,"line_start":38,"line_end":48,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! vec {","highlight_start":1,"highlight_end":19},{"text":"    () => (","highlight_start":1,"highlight_end":12},{"text":"        $crate::vec::Vec::new()","highlight_start":1,"highlight_end":32},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    ($elem:expr; $n:expr) => (","highlight_start":1,"highlight_end":31},{"text":"        $crate::vec::from_elem($elem, $n)","highlight_start":1,"highlight_end":42},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    ($($x:expr),+ $(,)?) => (","highlight_start":1,"highlight_end":30},{"text":"        <[_]>::into_vec(box [$($x),+])","highlight_start":1,"highlight_end":39},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"add `#![feature(const_mut_refs)]` to the crate attributes to enable","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0019]\u001b[0m\u001b[0m\u001b[1m: static contains unimplemented expression type\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/vector/native/tests.rs:8:24\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m8\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        NativeVector{vector: vec![1, 0, 1, 0, 1, 0, 1]},\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: add `#![feature(const_mut_refs)]` to the crate attributes to enable\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"calls in statics are limited to constant functions, tuple structs and tuple variants","code":{"code":"E0015","explanation":"A constant item was initialized with something that is not a constant\nexpression.\n\nErroneous code example:\n\n```compile_fail,E0015\nfn create_some() -> Option<u8> {\n    Some(1)\n}\n\nconst FOO: Option<u8> = create_some(); // error!\n```\n\nThe only functions that can be called in static or constant expressions are\n`const` functions, and struct/enum constructors.\n\nTo fix this error, you can declare `create_some` as a constant function:\n\n```\nconst fn create_some() -> Option<u8> { // declared as a const function\n    Some(1)\n}\n\nconst FOO: Option<u8> = create_some(); // ok!\n\n// These are also working:\nstruct Bar {\n    x: u8,\n}\n\nconst OTHER_FOO: Option<u8> = Some(1);\nconst BAR: Bar = Bar {x: 1};\n```\n"},"level":"error","spans":[{"file_name":"/home/max/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src/liballoc/macros.rs","byte_start":1392,"byte_end":1422,"line_start":46,"line_end":46,"column_start":9,"column_end":39,"is_primary":true,"text":[{"text":"        <[_]>::into_vec(box [$($x),+])","highlight_start":9,"highlight_end":39}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/vector/native/tests.rs","byte_start":197,"byte_end":222,"line_start":8,"line_end":8,"column_start":24,"column_end":49,"is_primary":false,"text":[{"text":"\t\tNativeVector{vector: vec![1, 0, 1, 0, 1, 0, 1]},","highlight_start":24,"highlight_end":49}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"vec!","def_site_span":{"file_name":"/home/max/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src/liballoc/macros.rs","byte_start":1204,"byte_end":1431,"line_start":38,"line_end":48,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! vec {","highlight_start":1,"highlight_end":19},{"text":"    () => (","highlight_start":1,"highlight_end":12},{"text":"        $crate::vec::Vec::new()","highlight_start":1,"highlight_end":32},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    ($elem:expr; $n:expr) => (","highlight_start":1,"highlight_end":31},{"text":"        $crate::vec::from_elem($elem, $n)","highlight_start":1,"highlight_end":42},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    ($($x:expr),+ $(,)?) => (","highlight_start":1,"highlight_end":30},{"text":"        <[_]>::into_vec(box [$($x),+])","highlight_start":1,"highlight_end":39},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0015]\u001b[0m\u001b[0m\u001b[1m: calls in statics are limited to constant functions, tuple structs and tuple variants\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/vector/native/tests.rs:8:24\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m8\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        NativeVector{vector: vec![1, 0, 1, 0, 1, 0, 1]},\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"allocations are not allowed in statics","code":{"code":"E0010","explanation":"The value of statics and constants must be known at compile time, and they live\nfor the entire lifetime of a program. Creating a boxed value allocates memory on\nthe heap at runtime, and therefore cannot be done at compile time.\n\nErroneous code example:\n\n```compile_fail,E0010\n#![feature(box_syntax)]\n\nconst CON : Box<i32> = box 0;\n```\n"},"level":"error","spans":[{"file_name":"/home/max/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src/liballoc/macros.rs","byte_start":1408,"byte_end":1421,"line_start":46,"line_end":46,"column_start":25,"column_end":38,"is_primary":true,"text":[{"text":"        <[_]>::into_vec(box [$($x),+])","highlight_start":25,"highlight_end":38}],"label":"allocation not allowed in statics","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/vector/native/tests.rs","byte_start":248,"byte_end":273,"line_start":9,"line_end":9,"column_start":24,"column_end":49,"is_primary":false,"text":[{"text":"\t\tNativeVector{vector: vec![1, 1, 0, 1, 1, 0, 1]}","highlight_start":24,"highlight_end":49}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"vec!","def_site_span":{"file_name":"/home/max/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src/liballoc/macros.rs","byte_start":1204,"byte_end":1431,"line_start":38,"line_end":48,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! vec {","highlight_start":1,"highlight_end":19},{"text":"    () => (","highlight_start":1,"highlight_end":12},{"text":"        $crate::vec::Vec::new()","highlight_start":1,"highlight_end":32},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    ($elem:expr; $n:expr) => (","highlight_start":1,"highlight_end":31},{"text":"        $crate::vec::from_elem($elem, $n)","highlight_start":1,"highlight_end":42},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    ($($x:expr),+ $(,)?) => (","highlight_start":1,"highlight_end":30},{"text":"        <[_]>::into_vec(box [$($x),+])","highlight_start":1,"highlight_end":39},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0010]\u001b[0m\u001b[0m\u001b[1m: allocations are not allowed in statics\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/vector/native/tests.rs:9:24\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        NativeVector{vector: vec![1, 1, 0, 1, 1, 0, 1]}\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mallocation not allowed in statics\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"static contains unimplemented expression type","code":{"code":"E0019","explanation":"A function call isn't allowed in the const's initialization expression\nbecause the expression's value must be known at compile-time.\n\nErroneous code example:\n\n```compile_fail,E0019\n#![feature(box_syntax)]\n\nfn main() {\n    struct MyOwned;\n\n    static STATIC11: Box<MyOwned> = box MyOwned; // error!\n}\n```\n\nRemember: you can't use a function call inside a const's initialization\nexpression! However, you can totally use it anywhere else:\n\n```\nenum Test {\n    V1\n}\n\nimpl Test {\n    fn func(&self) -> i32 {\n        12\n    }\n}\n\nfn main() {\n    const FOO: Test = Test::V1;\n\n    FOO.func(); // here is good\n    let x = FOO.func(); // or even here!\n}\n```\n"},"level":"error","spans":[{"file_name":"/home/max/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src/liballoc/macros.rs","byte_start":1412,"byte_end":1421,"line_start":46,"line_end":46,"column_start":29,"column_end":38,"is_primary":true,"text":[{"text":"        <[_]>::into_vec(box [$($x),+])","highlight_start":29,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/vector/native/tests.rs","byte_start":248,"byte_end":273,"line_start":9,"line_end":9,"column_start":24,"column_end":49,"is_primary":false,"text":[{"text":"\t\tNativeVector{vector: vec![1, 1, 0, 1, 1, 0, 1]}","highlight_start":24,"highlight_end":49}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"vec!","def_site_span":{"file_name":"/home/max/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src/liballoc/macros.rs","byte_start":1204,"byte_end":1431,"line_start":38,"line_end":48,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! vec {","highlight_start":1,"highlight_end":19},{"text":"    () => (","highlight_start":1,"highlight_end":12},{"text":"        $crate::vec::Vec::new()","highlight_start":1,"highlight_end":32},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    ($elem:expr; $n:expr) => (","highlight_start":1,"highlight_end":31},{"text":"        $crate::vec::from_elem($elem, $n)","highlight_start":1,"highlight_end":42},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    ($($x:expr),+ $(,)?) => (","highlight_start":1,"highlight_end":30},{"text":"        <[_]>::into_vec(box [$($x),+])","highlight_start":1,"highlight_end":39},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"add `#![feature(const_mut_refs)]` to the crate attributes to enable","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0019]\u001b[0m\u001b[0m\u001b[1m: static contains unimplemented expression type\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/vector/native/tests.rs:9:24\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        NativeVector{vector: vec![1, 1, 0, 1, 1, 0, 1]}\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: add `#![feature(const_mut_refs)]` to the crate attributes to enable\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"calls in statics are limited to constant functions, tuple structs and tuple variants","code":{"code":"E0015","explanation":"A constant item was initialized with something that is not a constant\nexpression.\n\nErroneous code example:\n\n```compile_fail,E0015\nfn create_some() -> Option<u8> {\n    Some(1)\n}\n\nconst FOO: Option<u8> = create_some(); // error!\n```\n\nThe only functions that can be called in static or constant expressions are\n`const` functions, and struct/enum constructors.\n\nTo fix this error, you can declare `create_some` as a constant function:\n\n```\nconst fn create_some() -> Option<u8> { // declared as a const function\n    Some(1)\n}\n\nconst FOO: Option<u8> = create_some(); // ok!\n\n// These are also working:\nstruct Bar {\n    x: u8,\n}\n\nconst OTHER_FOO: Option<u8> = Some(1);\nconst BAR: Bar = Bar {x: 1};\n```\n"},"level":"error","spans":[{"file_name":"/home/max/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src/liballoc/macros.rs","byte_start":1392,"byte_end":1422,"line_start":46,"line_end":46,"column_start":9,"column_end":39,"is_primary":true,"text":[{"text":"        <[_]>::into_vec(box [$($x),+])","highlight_start":9,"highlight_end":39}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/vector/native/tests.rs","byte_start":248,"byte_end":273,"line_start":9,"line_end":9,"column_start":24,"column_end":49,"is_primary":false,"text":[{"text":"\t\tNativeVector{vector: vec![1, 1, 0, 1, 1, 0, 1]}","highlight_start":24,"highlight_end":49}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"vec!","def_site_span":{"file_name":"/home/max/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src/liballoc/macros.rs","byte_start":1204,"byte_end":1431,"line_start":38,"line_end":48,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! vec {","highlight_start":1,"highlight_end":19},{"text":"    () => (","highlight_start":1,"highlight_end":12},{"text":"        $crate::vec::Vec::new()","highlight_start":1,"highlight_end":32},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    ($elem:expr; $n:expr) => (","highlight_start":1,"highlight_end":31},{"text":"        $crate::vec::from_elem($elem, $n)","highlight_start":1,"highlight_end":42},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    ($($x:expr),+ $(,)?) => (","highlight_start":1,"highlight_end":30},{"text":"        <[_]>::into_vec(box [$($x),+])","highlight_start":1,"highlight_end":39},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0015]\u001b[0m\u001b[0m\u001b[1m: calls in statics are limited to constant functions, tuple structs and tuple variants\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/vector/native/tests.rs:9:24\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        NativeVector{vector: vec![1, 1, 0, 1, 1, 0, 1]}\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"allocations are not allowed in statics","code":{"code":"E0010","explanation":"The value of statics and constants must be known at compile time, and they live\nfor the entire lifetime of a program. Creating a boxed value allocates memory on\nthe heap at runtime, and therefore cannot be done at compile time.\n\nErroneous code example:\n\n```compile_fail,E0010\n#![feature(box_syntax)]\n\nconst CON : Box<i32> = box 0;\n```\n"},"level":"error","spans":[{"file_name":"/home/max/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src/liballoc/macros.rs","byte_start":1408,"byte_end":1421,"line_start":46,"line_end":46,"column_start":25,"column_end":38,"is_primary":true,"text":[{"text":"        <[_]>::into_vec(box [$($x),+])","highlight_start":25,"highlight_end":38}],"label":"allocation not allowed in statics","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/vector/native/tests.rs","byte_start":343,"byte_end":359,"line_start":13,"line_end":13,"column_start":24,"column_end":40,"is_primary":false,"text":[{"text":"\t\tNativeVector{vector: vec![0, 1, 1, 0]},","highlight_start":24,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"vec!","def_site_span":{"file_name":"/home/max/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src/liballoc/macros.rs","byte_start":1204,"byte_end":1431,"line_start":38,"line_end":48,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! vec {","highlight_start":1,"highlight_end":19},{"text":"    () => (","highlight_start":1,"highlight_end":12},{"text":"        $crate::vec::Vec::new()","highlight_start":1,"highlight_end":32},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    ($elem:expr; $n:expr) => (","highlight_start":1,"highlight_end":31},{"text":"        $crate::vec::from_elem($elem, $n)","highlight_start":1,"highlight_end":42},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    ($($x:expr),+ $(,)?) => (","highlight_start":1,"highlight_end":30},{"text":"        <[_]>::into_vec(box [$($x),+])","highlight_start":1,"highlight_end":39},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0010]\u001b[0m\u001b[0m\u001b[1m: allocations are not allowed in statics\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/vector/native/tests.rs:13:24\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        NativeVector{vector: vec![0, 1, 1, 0]},\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mallocation not allowed in statics\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"static contains unimplemented expression type","code":{"code":"E0019","explanation":"A function call isn't allowed in the const's initialization expression\nbecause the expression's value must be known at compile-time.\n\nErroneous code example:\n\n```compile_fail,E0019\n#![feature(box_syntax)]\n\nfn main() {\n    struct MyOwned;\n\n    static STATIC11: Box<MyOwned> = box MyOwned; // error!\n}\n```\n\nRemember: you can't use a function call inside a const's initialization\nexpression! However, you can totally use it anywhere else:\n\n```\nenum Test {\n    V1\n}\n\nimpl Test {\n    fn func(&self) -> i32 {\n        12\n    }\n}\n\nfn main() {\n    const FOO: Test = Test::V1;\n\n    FOO.func(); // here is good\n    let x = FOO.func(); // or even here!\n}\n```\n"},"level":"error","spans":[{"file_name":"/home/max/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src/liballoc/macros.rs","byte_start":1412,"byte_end":1421,"line_start":46,"line_end":46,"column_start":29,"column_end":38,"is_primary":true,"text":[{"text":"        <[_]>::into_vec(box [$($x),+])","highlight_start":29,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/vector/native/tests.rs","byte_start":343,"byte_end":359,"line_start":13,"line_end":13,"column_start":24,"column_end":40,"is_primary":false,"text":[{"text":"\t\tNativeVector{vector: vec![0, 1, 1, 0]},","highlight_start":24,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"vec!","def_site_span":{"file_name":"/home/max/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src/liballoc/macros.rs","byte_start":1204,"byte_end":1431,"line_start":38,"line_end":48,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! vec {","highlight_start":1,"highlight_end":19},{"text":"    () => (","highlight_start":1,"highlight_end":12},{"text":"        $crate::vec::Vec::new()","highlight_start":1,"highlight_end":32},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    ($elem:expr; $n:expr) => (","highlight_start":1,"highlight_end":31},{"text":"        $crate::vec::from_elem($elem, $n)","highlight_start":1,"highlight_end":42},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    ($($x:expr),+ $(,)?) => (","highlight_start":1,"highlight_end":30},{"text":"        <[_]>::into_vec(box [$($x),+])","highlight_start":1,"highlight_end":39},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"add `#![feature(const_mut_refs)]` to the crate attributes to enable","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0019]\u001b[0m\u001b[0m\u001b[1m: static contains unimplemented expression type\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/vector/native/tests.rs:13:24\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        NativeVector{vector: vec![0, 1, 1, 0]},\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: add `#![feature(const_mut_refs)]` to the crate attributes to enable\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"calls in statics are limited to constant functions, tuple structs and tuple variants","code":{"code":"E0015","explanation":"A constant item was initialized with something that is not a constant\nexpression.\n\nErroneous code example:\n\n```compile_fail,E0015\nfn create_some() -> Option<u8> {\n    Some(1)\n}\n\nconst FOO: Option<u8> = create_some(); // error!\n```\n\nThe only functions that can be called in static or constant expressions are\n`const` functions, and struct/enum constructors.\n\nTo fix this error, you can declare `create_some` as a constant function:\n\n```\nconst fn create_some() -> Option<u8> { // declared as a const function\n    Some(1)\n}\n\nconst FOO: Option<u8> = create_some(); // ok!\n\n// These are also working:\nstruct Bar {\n    x: u8,\n}\n\nconst OTHER_FOO: Option<u8> = Some(1);\nconst BAR: Bar = Bar {x: 1};\n```\n"},"level":"error","spans":[{"file_name":"/home/max/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src/liballoc/macros.rs","byte_start":1392,"byte_end":1422,"line_start":46,"line_end":46,"column_start":9,"column_end":39,"is_primary":true,"text":[{"text":"        <[_]>::into_vec(box [$($x),+])","highlight_start":9,"highlight_end":39}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/vector/native/tests.rs","byte_start":343,"byte_end":359,"line_start":13,"line_end":13,"column_start":24,"column_end":40,"is_primary":false,"text":[{"text":"\t\tNativeVector{vector: vec![0, 1, 1, 0]},","highlight_start":24,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"vec!","def_site_span":{"file_name":"/home/max/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src/liballoc/macros.rs","byte_start":1204,"byte_end":1431,"line_start":38,"line_end":48,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! vec {","highlight_start":1,"highlight_end":19},{"text":"    () => (","highlight_start":1,"highlight_end":12},{"text":"        $crate::vec::Vec::new()","highlight_start":1,"highlight_end":32},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    ($elem:expr; $n:expr) => (","highlight_start":1,"highlight_end":31},{"text":"        $crate::vec::from_elem($elem, $n)","highlight_start":1,"highlight_end":42},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    ($($x:expr),+ $(,)?) => (","highlight_start":1,"highlight_end":30},{"text":"        <[_]>::into_vec(box [$($x),+])","highlight_start":1,"highlight_end":39},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0015]\u001b[0m\u001b[0m\u001b[1m: calls in statics are limited to constant functions, tuple structs and tuple variants\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/vector/native/tests.rs:13:24\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        NativeVector{vector: vec![0, 1, 1, 0]},\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"allocations are not allowed in statics","code":{"code":"E0010","explanation":"The value of statics and constants must be known at compile time, and they live\nfor the entire lifetime of a program. Creating a boxed value allocates memory on\nthe heap at runtime, and therefore cannot be done at compile time.\n\nErroneous code example:\n\n```compile_fail,E0010\n#![feature(box_syntax)]\n\nconst CON : Box<i32> = box 0;\n```\n"},"level":"error","spans":[{"file_name":"/home/max/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src/liballoc/macros.rs","byte_start":1408,"byte_end":1421,"line_start":46,"line_end":46,"column_start":25,"column_end":38,"is_primary":true,"text":[{"text":"        <[_]>::into_vec(box [$($x),+])","highlight_start":25,"highlight_end":38}],"label":"allocation not allowed in statics","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/vector/native/tests.rs","byte_start":385,"byte_end":404,"line_start":14,"line_end":14,"column_start":24,"column_end":43,"is_primary":false,"text":[{"text":"\t\tNativeVector{vector: vec![1, 1, 0, 1, 1]},","highlight_start":24,"highlight_end":43}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"vec!","def_site_span":{"file_name":"/home/max/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src/liballoc/macros.rs","byte_start":1204,"byte_end":1431,"line_start":38,"line_end":48,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! vec {","highlight_start":1,"highlight_end":19},{"text":"    () => (","highlight_start":1,"highlight_end":12},{"text":"        $crate::vec::Vec::new()","highlight_start":1,"highlight_end":32},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    ($elem:expr; $n:expr) => (","highlight_start":1,"highlight_end":31},{"text":"        $crate::vec::from_elem($elem, $n)","highlight_start":1,"highlight_end":42},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    ($($x:expr),+ $(,)?) => (","highlight_start":1,"highlight_end":30},{"text":"        <[_]>::into_vec(box [$($x),+])","highlight_start":1,"highlight_end":39},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0010]\u001b[0m\u001b[0m\u001b[1m: allocations are not allowed in statics\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/vector/native/tests.rs:14:24\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m14\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        NativeVector{vector: vec![1, 1, 0, 1, 1]},\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mallocation not allowed in statics\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"static contains unimplemented expression type","code":{"code":"E0019","explanation":"A function call isn't allowed in the const's initialization expression\nbecause the expression's value must be known at compile-time.\n\nErroneous code example:\n\n```compile_fail,E0019\n#![feature(box_syntax)]\n\nfn main() {\n    struct MyOwned;\n\n    static STATIC11: Box<MyOwned> = box MyOwned; // error!\n}\n```\n\nRemember: you can't use a function call inside a const's initialization\nexpression! However, you can totally use it anywhere else:\n\n```\nenum Test {\n    V1\n}\n\nimpl Test {\n    fn func(&self) -> i32 {\n        12\n    }\n}\n\nfn main() {\n    const FOO: Test = Test::V1;\n\n    FOO.func(); // here is good\n    let x = FOO.func(); // or even here!\n}\n```\n"},"level":"error","spans":[{"file_name":"/home/max/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src/liballoc/macros.rs","byte_start":1412,"byte_end":1421,"line_start":46,"line_end":46,"column_start":29,"column_end":38,"is_primary":true,"text":[{"text":"        <[_]>::into_vec(box [$($x),+])","highlight_start":29,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/vector/native/tests.rs","byte_start":385,"byte_end":404,"line_start":14,"line_end":14,"column_start":24,"column_end":43,"is_primary":false,"text":[{"text":"\t\tNativeVector{vector: vec![1, 1, 0, 1, 1]},","highlight_start":24,"highlight_end":43}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"vec!","def_site_span":{"file_name":"/home/max/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src/liballoc/macros.rs","byte_start":1204,"byte_end":1431,"line_start":38,"line_end":48,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! vec {","highlight_start":1,"highlight_end":19},{"text":"    () => (","highlight_start":1,"highlight_end":12},{"text":"        $crate::vec::Vec::new()","highlight_start":1,"highlight_end":32},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    ($elem:expr; $n:expr) => (","highlight_start":1,"highlight_end":31},{"text":"        $crate::vec::from_elem($elem, $n)","highlight_start":1,"highlight_end":42},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    ($($x:expr),+ $(,)?) => (","highlight_start":1,"highlight_end":30},{"text":"        <[_]>::into_vec(box [$($x),+])","highlight_start":1,"highlight_end":39},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"add `#![feature(const_mut_refs)]` to the crate attributes to enable","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0019]\u001b[0m\u001b[0m\u001b[1m: static contains unimplemented expression type\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/vector/native/tests.rs:14:24\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m14\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        NativeVector{vector: vec![1, 1, 0, 1, 1]},\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: add `#![feature(const_mut_refs)]` to the crate attributes to enable\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"calls in statics are limited to constant functions, tuple structs and tuple variants","code":{"code":"E0015","explanation":"A constant item was initialized with something that is not a constant\nexpression.\n\nErroneous code example:\n\n```compile_fail,E0015\nfn create_some() -> Option<u8> {\n    Some(1)\n}\n\nconst FOO: Option<u8> = create_some(); // error!\n```\n\nThe only functions that can be called in static or constant expressions are\n`const` functions, and struct/enum constructors.\n\nTo fix this error, you can declare `create_some` as a constant function:\n\n```\nconst fn create_some() -> Option<u8> { // declared as a const function\n    Some(1)\n}\n\nconst FOO: Option<u8> = create_some(); // ok!\n\n// These are also working:\nstruct Bar {\n    x: u8,\n}\n\nconst OTHER_FOO: Option<u8> = Some(1);\nconst BAR: Bar = Bar {x: 1};\n```\n"},"level":"error","spans":[{"file_name":"/home/max/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src/liballoc/macros.rs","byte_start":1392,"byte_end":1422,"line_start":46,"line_end":46,"column_start":9,"column_end":39,"is_primary":true,"text":[{"text":"        <[_]>::into_vec(box [$($x),+])","highlight_start":9,"highlight_end":39}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/vector/native/tests.rs","byte_start":385,"byte_end":404,"line_start":14,"line_end":14,"column_start":24,"column_end":43,"is_primary":false,"text":[{"text":"\t\tNativeVector{vector: vec![1, 1, 0, 1, 1]},","highlight_start":24,"highlight_end":43}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"vec!","def_site_span":{"file_name":"/home/max/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src/liballoc/macros.rs","byte_start":1204,"byte_end":1431,"line_start":38,"line_end":48,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! vec {","highlight_start":1,"highlight_end":19},{"text":"    () => (","highlight_start":1,"highlight_end":12},{"text":"        $crate::vec::Vec::new()","highlight_start":1,"highlight_end":32},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    ($elem:expr; $n:expr) => (","highlight_start":1,"highlight_end":31},{"text":"        $crate::vec::from_elem($elem, $n)","highlight_start":1,"highlight_end":42},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    ($($x:expr),+ $(,)?) => (","highlight_start":1,"highlight_end":30},{"text":"        <[_]>::into_vec(box [$($x),+])","highlight_start":1,"highlight_end":39},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0015]\u001b[0m\u001b[0m\u001b[1m: calls in statics are limited to constant functions, tuple structs and tuple variants\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/vector/native/tests.rs:14:24\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m14\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        NativeVector{vector: vec![1, 1, 0, 1, 1]},\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"allocations are not allowed in statics","code":{"code":"E0010","explanation":"The value of statics and constants must be known at compile time, and they live\nfor the entire lifetime of a program. Creating a boxed value allocates memory on\nthe heap at runtime, and therefore cannot be done at compile time.\n\nErroneous code example:\n\n```compile_fail,E0010\n#![feature(box_syntax)]\n\nconst CON : Box<i32> = box 0;\n```\n"},"level":"error","spans":[{"file_name":"/home/max/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src/liballoc/macros.rs","byte_start":1408,"byte_end":1421,"line_start":46,"line_end":46,"column_start":25,"column_end":38,"is_primary":true,"text":[{"text":"        <[_]>::into_vec(box [$($x),+])","highlight_start":25,"highlight_end":38}],"label":"allocation not allowed in statics","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/vector/native/tests.rs","byte_start":430,"byte_end":455,"line_start":15,"line_end":15,"column_start":24,"column_end":49,"is_primary":false,"text":[{"text":"\t\tNativeVector{vector: vec![1, 1, 1, 1, 0, 0, 0]},","highlight_start":24,"highlight_end":49}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"vec!","def_site_span":{"file_name":"/home/max/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src/liballoc/macros.rs","byte_start":1204,"byte_end":1431,"line_start":38,"line_end":48,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! vec {","highlight_start":1,"highlight_end":19},{"text":"    () => (","highlight_start":1,"highlight_end":12},{"text":"        $crate::vec::Vec::new()","highlight_start":1,"highlight_end":32},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    ($elem:expr; $n:expr) => (","highlight_start":1,"highlight_end":31},{"text":"        $crate::vec::from_elem($elem, $n)","highlight_start":1,"highlight_end":42},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    ($($x:expr),+ $(,)?) => (","highlight_start":1,"highlight_end":30},{"text":"        <[_]>::into_vec(box [$($x),+])","highlight_start":1,"highlight_end":39},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0010]\u001b[0m\u001b[0m\u001b[1m: allocations are not allowed in statics\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/vector/native/tests.rs:15:24\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m15\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        NativeVector{vector: vec![1, 1, 1, 1, 0, 0, 0]},\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mallocation not allowed in statics\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"static contains unimplemented expression type","code":{"code":"E0019","explanation":"A function call isn't allowed in the const's initialization expression\nbecause the expression's value must be known at compile-time.\n\nErroneous code example:\n\n```compile_fail,E0019\n#![feature(box_syntax)]\n\nfn main() {\n    struct MyOwned;\n\n    static STATIC11: Box<MyOwned> = box MyOwned; // error!\n}\n```\n\nRemember: you can't use a function call inside a const's initialization\nexpression! However, you can totally use it anywhere else:\n\n```\nenum Test {\n    V1\n}\n\nimpl Test {\n    fn func(&self) -> i32 {\n        12\n    }\n}\n\nfn main() {\n    const FOO: Test = Test::V1;\n\n    FOO.func(); // here is good\n    let x = FOO.func(); // or even here!\n}\n```\n"},"level":"error","spans":[{"file_name":"/home/max/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src/liballoc/macros.rs","byte_start":1412,"byte_end":1421,"line_start":46,"line_end":46,"column_start":29,"column_end":38,"is_primary":true,"text":[{"text":"        <[_]>::into_vec(box [$($x),+])","highlight_start":29,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/vector/native/tests.rs","byte_start":430,"byte_end":455,"line_start":15,"line_end":15,"column_start":24,"column_end":49,"is_primary":false,"text":[{"text":"\t\tNativeVector{vector: vec![1, 1, 1, 1, 0, 0, 0]},","highlight_start":24,"highlight_end":49}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"vec!","def_site_span":{"file_name":"/home/max/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src/liballoc/macros.rs","byte_start":1204,"byte_end":1431,"line_start":38,"line_end":48,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! vec {","highlight_start":1,"highlight_end":19},{"text":"    () => (","highlight_start":1,"highlight_end":12},{"text":"        $crate::vec::Vec::new()","highlight_start":1,"highlight_end":32},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    ($elem:expr; $n:expr) => (","highlight_start":1,"highlight_end":31},{"text":"        $crate::vec::from_elem($elem, $n)","highlight_start":1,"highlight_end":42},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    ($($x:expr),+ $(,)?) => (","highlight_start":1,"highlight_end":30},{"text":"        <[_]>::into_vec(box [$($x),+])","highlight_start":1,"highlight_end":39},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"add `#![feature(const_mut_refs)]` to the crate attributes to enable","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0019]\u001b[0m\u001b[0m\u001b[1m: static contains unimplemented expression type\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/vector/native/tests.rs:15:24\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m15\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        NativeVector{vector: vec![1, 1, 1, 1, 0, 0, 0]},\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: add `#![feature(const_mut_refs)]` to the crate attributes to enable\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"calls in statics are limited to constant functions, tuple structs and tuple variants","code":{"code":"E0015","explanation":"A constant item was initialized with something that is not a constant\nexpression.\n\nErroneous code example:\n\n```compile_fail,E0015\nfn create_some() -> Option<u8> {\n    Some(1)\n}\n\nconst FOO: Option<u8> = create_some(); // error!\n```\n\nThe only functions that can be called in static or constant expressions are\n`const` functions, and struct/enum constructors.\n\nTo fix this error, you can declare `create_some` as a constant function:\n\n```\nconst fn create_some() -> Option<u8> { // declared as a const function\n    Some(1)\n}\n\nconst FOO: Option<u8> = create_some(); // ok!\n\n// These are also working:\nstruct Bar {\n    x: u8,\n}\n\nconst OTHER_FOO: Option<u8> = Some(1);\nconst BAR: Bar = Bar {x: 1};\n```\n"},"level":"error","spans":[{"file_name":"/home/max/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src/liballoc/macros.rs","byte_start":1392,"byte_end":1422,"line_start":46,"line_end":46,"column_start":9,"column_end":39,"is_primary":true,"text":[{"text":"        <[_]>::into_vec(box [$($x),+])","highlight_start":9,"highlight_end":39}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/vector/native/tests.rs","byte_start":430,"byte_end":455,"line_start":15,"line_end":15,"column_start":24,"column_end":49,"is_primary":false,"text":[{"text":"\t\tNativeVector{vector: vec![1, 1, 1, 1, 0, 0, 0]},","highlight_start":24,"highlight_end":49}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"vec!","def_site_span":{"file_name":"/home/max/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src/liballoc/macros.rs","byte_start":1204,"byte_end":1431,"line_start":38,"line_end":48,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! vec {","highlight_start":1,"highlight_end":19},{"text":"    () => (","highlight_start":1,"highlight_end":12},{"text":"        $crate::vec::Vec::new()","highlight_start":1,"highlight_end":32},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    ($elem:expr; $n:expr) => (","highlight_start":1,"highlight_end":31},{"text":"        $crate::vec::from_elem($elem, $n)","highlight_start":1,"highlight_end":42},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    ($($x:expr),+ $(,)?) => (","highlight_start":1,"highlight_end":30},{"text":"        <[_]>::into_vec(box [$($x),+])","highlight_start":1,"highlight_end":39},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0015]\u001b[0m\u001b[0m\u001b[1m: calls in statics are limited to constant functions, tuple structs and tuple variants\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/vector/native/tests.rs:15:24\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m15\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        NativeVector{vector: vec![1, 1, 1, 1, 0, 0, 0]},\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"allocations are not allowed in statics","code":{"code":"E0010","explanation":"The value of statics and constants must be known at compile time, and they live\nfor the entire lifetime of a program. Creating a boxed value allocates memory on\nthe heap at runtime, and therefore cannot be done at compile time.\n\nErroneous code example:\n\n```compile_fail,E0010\n#![feature(box_syntax)]\n\nconst CON : Box<i32> = box 0;\n```\n"},"level":"error","spans":[{"file_name":"/home/max/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src/liballoc/macros.rs","byte_start":1408,"byte_end":1421,"line_start":46,"line_end":46,"column_start":25,"column_end":38,"is_primary":true,"text":[{"text":"        <[_]>::into_vec(box [$($x),+])","highlight_start":25,"highlight_end":38}],"label":"allocation not allowed in statics","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/vector/native/tests.rs","byte_start":481,"byte_end":503,"line_start":16,"line_end":16,"column_start":24,"column_end":46,"is_primary":false,"text":[{"text":"\t\tNativeVector{vector: vec![1, 1, 0, 1, 1, 0]}","highlight_start":24,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"vec!","def_site_span":{"file_name":"/home/max/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src/liballoc/macros.rs","byte_start":1204,"byte_end":1431,"line_start":38,"line_end":48,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! vec {","highlight_start":1,"highlight_end":19},{"text":"    () => (","highlight_start":1,"highlight_end":12},{"text":"        $crate::vec::Vec::new()","highlight_start":1,"highlight_end":32},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    ($elem:expr; $n:expr) => (","highlight_start":1,"highlight_end":31},{"text":"        $crate::vec::from_elem($elem, $n)","highlight_start":1,"highlight_end":42},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    ($($x:expr),+ $(,)?) => (","highlight_start":1,"highlight_end":30},{"text":"        <[_]>::into_vec(box [$($x),+])","highlight_start":1,"highlight_end":39},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0010]\u001b[0m\u001b[0m\u001b[1m: allocations are not allowed in statics\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/vector/native/tests.rs:16:24\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m16\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        NativeVector{vector: vec![1, 1, 0, 1, 1, 0]}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mallocation not allowed in statics\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"static contains unimplemented expression type","code":{"code":"E0019","explanation":"A function call isn't allowed in the const's initialization expression\nbecause the expression's value must be known at compile-time.\n\nErroneous code example:\n\n```compile_fail,E0019\n#![feature(box_syntax)]\n\nfn main() {\n    struct MyOwned;\n\n    static STATIC11: Box<MyOwned> = box MyOwned; // error!\n}\n```\n\nRemember: you can't use a function call inside a const's initialization\nexpression! However, you can totally use it anywhere else:\n\n```\nenum Test {\n    V1\n}\n\nimpl Test {\n    fn func(&self) -> i32 {\n        12\n    }\n}\n\nfn main() {\n    const FOO: Test = Test::V1;\n\n    FOO.func(); // here is good\n    let x = FOO.func(); // or even here!\n}\n```\n"},"level":"error","spans":[{"file_name":"/home/max/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src/liballoc/macros.rs","byte_start":1412,"byte_end":1421,"line_start":46,"line_end":46,"column_start":29,"column_end":38,"is_primary":true,"text":[{"text":"        <[_]>::into_vec(box [$($x),+])","highlight_start":29,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/vector/native/tests.rs","byte_start":481,"byte_end":503,"line_start":16,"line_end":16,"column_start":24,"column_end":46,"is_primary":false,"text":[{"text":"\t\tNativeVector{vector: vec![1, 1, 0, 1, 1, 0]}","highlight_start":24,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"vec!","def_site_span":{"file_name":"/home/max/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src/liballoc/macros.rs","byte_start":1204,"byte_end":1431,"line_start":38,"line_end":48,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! vec {","highlight_start":1,"highlight_end":19},{"text":"    () => (","highlight_start":1,"highlight_end":12},{"text":"        $crate::vec::Vec::new()","highlight_start":1,"highlight_end":32},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    ($elem:expr; $n:expr) => (","highlight_start":1,"highlight_end":31},{"text":"        $crate::vec::from_elem($elem, $n)","highlight_start":1,"highlight_end":42},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    ($($x:expr),+ $(,)?) => (","highlight_start":1,"highlight_end":30},{"text":"        <[_]>::into_vec(box [$($x),+])","highlight_start":1,"highlight_end":39},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"add `#![feature(const_mut_refs)]` to the crate attributes to enable","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0019]\u001b[0m\u001b[0m\u001b[1m: static contains unimplemented expression type\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/vector/native/tests.rs:16:24\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m16\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        NativeVector{vector: vec![1, 1, 0, 1, 1, 0]}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: add `#![feature(const_mut_refs)]` to the crate attributes to enable\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"calls in statics are limited to constant functions, tuple structs and tuple variants","code":{"code":"E0015","explanation":"A constant item was initialized with something that is not a constant\nexpression.\n\nErroneous code example:\n\n```compile_fail,E0015\nfn create_some() -> Option<u8> {\n    Some(1)\n}\n\nconst FOO: Option<u8> = create_some(); // error!\n```\n\nThe only functions that can be called in static or constant expressions are\n`const` functions, and struct/enum constructors.\n\nTo fix this error, you can declare `create_some` as a constant function:\n\n```\nconst fn create_some() -> Option<u8> { // declared as a const function\n    Some(1)\n}\n\nconst FOO: Option<u8> = create_some(); // ok!\n\n// These are also working:\nstruct Bar {\n    x: u8,\n}\n\nconst OTHER_FOO: Option<u8> = Some(1);\nconst BAR: Bar = Bar {x: 1};\n```\n"},"level":"error","spans":[{"file_name":"/home/max/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src/liballoc/macros.rs","byte_start":1392,"byte_end":1422,"line_start":46,"line_end":46,"column_start":9,"column_end":39,"is_primary":true,"text":[{"text":"        <[_]>::into_vec(box [$($x),+])","highlight_start":9,"highlight_end":39}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/vector/native/tests.rs","byte_start":481,"byte_end":503,"line_start":16,"line_end":16,"column_start":24,"column_end":46,"is_primary":false,"text":[{"text":"\t\tNativeVector{vector: vec![1, 1, 0, 1, 1, 0]}","highlight_start":24,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"vec!","def_site_span":{"file_name":"/home/max/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src/liballoc/macros.rs","byte_start":1204,"byte_end":1431,"line_start":38,"line_end":48,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! vec {","highlight_start":1,"highlight_end":19},{"text":"    () => (","highlight_start":1,"highlight_end":12},{"text":"        $crate::vec::Vec::new()","highlight_start":1,"highlight_end":32},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    ($elem:expr; $n:expr) => (","highlight_start":1,"highlight_end":31},{"text":"        $crate::vec::from_elem($elem, $n)","highlight_start":1,"highlight_end":42},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    ($($x:expr),+ $(,)?) => (","highlight_start":1,"highlight_end":30},{"text":"        <[_]>::into_vec(box [$($x),+])","highlight_start":1,"highlight_end":39},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0015]\u001b[0m\u001b[0m\u001b[1m: calls in statics are limited to constant functions, tuple structs and tuple variants\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/vector/native/tests.rs:16:24\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m16\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        NativeVector{vector: vec![1, 1, 0, 1, 1, 0]}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"allocations are not allowed in statics","code":{"code":"E0010","explanation":"The value of statics and constants must be known at compile time, and they live\nfor the entire lifetime of a program. Creating a boxed value allocates memory on\nthe heap at runtime, and therefore cannot be done at compile time.\n\nErroneous code example:\n\n```compile_fail,E0010\n#![feature(box_syntax)]\n\nconst CON : Box<i32> = box 0;\n```\n"},"level":"error","spans":[{"file_name":"/home/max/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src/liballoc/macros.rs","byte_start":1408,"byte_end":1421,"line_start":46,"line_end":46,"column_start":25,"column_end":38,"is_primary":true,"text":[{"text":"        <[_]>::into_vec(box [$($x),+])","highlight_start":25,"highlight_end":38}],"label":"allocation not allowed in statics","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/binary/tests.rs","byte_start":89,"byte_end":162,"line_start":6,"line_end":11,"column_start":31,"column_end":3,"is_primary":false,"text":[{"text":"\tstatic test_x : Vec<usize> = vec![","highlight_start":31,"highlight_end":36},{"text":"\t\t0, 1, 2, 3,","highlight_start":1,"highlight_end":14},{"text":"\t\t4, 5, 6, 7,","highlight_start":1,"highlight_end":14},{"text":"\t\t8, 9, 10, 11,","highlight_start":1,"highlight_end":16},{"text":"\t\t121, 128, 200, 255","highlight_start":1,"highlight_end":21},{"text":"\t];","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"vec!","def_site_span":{"file_name":"/home/max/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src/liballoc/macros.rs","byte_start":1204,"byte_end":1431,"line_start":38,"line_end":48,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! vec {","highlight_start":1,"highlight_end":19},{"text":"    () => (","highlight_start":1,"highlight_end":12},{"text":"        $crate::vec::Vec::new()","highlight_start":1,"highlight_end":32},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    ($elem:expr; $n:expr) => (","highlight_start":1,"highlight_end":31},{"text":"        $crate::vec::from_elem($elem, $n)","highlight_start":1,"highlight_end":42},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    ($($x:expr),+ $(,)?) => (","highlight_start":1,"highlight_end":30},{"text":"        <[_]>::into_vec(box [$($x),+])","highlight_start":1,"highlight_end":39},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0010]\u001b[0m\u001b[0m\u001b[1m: allocations are not allowed in statics\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/binary/tests.rs:6:31\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m6\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m    static test_x : Vec<usize> = vec![\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m__________________________________^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        0, 1, 2, 3,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m8\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        4, 5, 6, 7,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        8, 9, 10, 11,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        121, 128, 200, 255\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ];\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|_____^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mallocation not allowed in statics\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"static contains unimplemented expression type","code":{"code":"E0019","explanation":"A function call isn't allowed in the const's initialization expression\nbecause the expression's value must be known at compile-time.\n\nErroneous code example:\n\n```compile_fail,E0019\n#![feature(box_syntax)]\n\nfn main() {\n    struct MyOwned;\n\n    static STATIC11: Box<MyOwned> = box MyOwned; // error!\n}\n```\n\nRemember: you can't use a function call inside a const's initialization\nexpression! However, you can totally use it anywhere else:\n\n```\nenum Test {\n    V1\n}\n\nimpl Test {\n    fn func(&self) -> i32 {\n        12\n    }\n}\n\nfn main() {\n    const FOO: Test = Test::V1;\n\n    FOO.func(); // here is good\n    let x = FOO.func(); // or even here!\n}\n```\n"},"level":"error","spans":[{"file_name":"/home/max/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src/liballoc/macros.rs","byte_start":1412,"byte_end":1421,"line_start":46,"line_end":46,"column_start":29,"column_end":38,"is_primary":true,"text":[{"text":"        <[_]>::into_vec(box [$($x),+])","highlight_start":29,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/binary/tests.rs","byte_start":89,"byte_end":162,"line_start":6,"line_end":11,"column_start":31,"column_end":3,"is_primary":false,"text":[{"text":"\tstatic test_x : Vec<usize> = vec![","highlight_start":31,"highlight_end":36},{"text":"\t\t0, 1, 2, 3,","highlight_start":1,"highlight_end":14},{"text":"\t\t4, 5, 6, 7,","highlight_start":1,"highlight_end":14},{"text":"\t\t8, 9, 10, 11,","highlight_start":1,"highlight_end":16},{"text":"\t\t121, 128, 200, 255","highlight_start":1,"highlight_end":21},{"text":"\t];","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"vec!","def_site_span":{"file_name":"/home/max/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src/liballoc/macros.rs","byte_start":1204,"byte_end":1431,"line_start":38,"line_end":48,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! vec {","highlight_start":1,"highlight_end":19},{"text":"    () => (","highlight_start":1,"highlight_end":12},{"text":"        $crate::vec::Vec::new()","highlight_start":1,"highlight_end":32},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    ($elem:expr; $n:expr) => (","highlight_start":1,"highlight_end":31},{"text":"        $crate::vec::from_elem($elem, $n)","highlight_start":1,"highlight_end":42},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    ($($x:expr),+ $(,)?) => (","highlight_start":1,"highlight_end":30},{"text":"        <[_]>::into_vec(box [$($x),+])","highlight_start":1,"highlight_end":39},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"add `#![feature(const_mut_refs)]` to the crate attributes to enable","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0019]\u001b[0m\u001b[0m\u001b[1m: static contains unimplemented expression type\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/binary/tests.rs:6:31\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m6\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m    static test_x : Vec<usize> = vec![\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m__________________________________^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        0, 1, 2, 3,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m8\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        4, 5, 6, 7,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        8, 9, 10, 11,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        121, 128, 200, 255\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ];\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|_____^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: add `#![feature(const_mut_refs)]` to the crate attributes to enable\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"calls in statics are limited to constant functions, tuple structs and tuple variants","code":{"code":"E0015","explanation":"A constant item was initialized with something that is not a constant\nexpression.\n\nErroneous code example:\n\n```compile_fail,E0015\nfn create_some() -> Option<u8> {\n    Some(1)\n}\n\nconst FOO: Option<u8> = create_some(); // error!\n```\n\nThe only functions that can be called in static or constant expressions are\n`const` functions, and struct/enum constructors.\n\nTo fix this error, you can declare `create_some` as a constant function:\n\n```\nconst fn create_some() -> Option<u8> { // declared as a const function\n    Some(1)\n}\n\nconst FOO: Option<u8> = create_some(); // ok!\n\n// These are also working:\nstruct Bar {\n    x: u8,\n}\n\nconst OTHER_FOO: Option<u8> = Some(1);\nconst BAR: Bar = Bar {x: 1};\n```\n"},"level":"error","spans":[{"file_name":"/home/max/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src/liballoc/macros.rs","byte_start":1392,"byte_end":1422,"line_start":46,"line_end":46,"column_start":9,"column_end":39,"is_primary":true,"text":[{"text":"        <[_]>::into_vec(box [$($x),+])","highlight_start":9,"highlight_end":39}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/binary/tests.rs","byte_start":89,"byte_end":162,"line_start":6,"line_end":11,"column_start":31,"column_end":3,"is_primary":false,"text":[{"text":"\tstatic test_x : Vec<usize> = vec![","highlight_start":31,"highlight_end":36},{"text":"\t\t0, 1, 2, 3,","highlight_start":1,"highlight_end":14},{"text":"\t\t4, 5, 6, 7,","highlight_start":1,"highlight_end":14},{"text":"\t\t8, 9, 10, 11,","highlight_start":1,"highlight_end":16},{"text":"\t\t121, 128, 200, 255","highlight_start":1,"highlight_end":21},{"text":"\t];","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"vec!","def_site_span":{"file_name":"/home/max/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src/liballoc/macros.rs","byte_start":1204,"byte_end":1431,"line_start":38,"line_end":48,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! vec {","highlight_start":1,"highlight_end":19},{"text":"    () => (","highlight_start":1,"highlight_end":12},{"text":"        $crate::vec::Vec::new()","highlight_start":1,"highlight_end":32},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    ($elem:expr; $n:expr) => (","highlight_start":1,"highlight_end":31},{"text":"        $crate::vec::from_elem($elem, $n)","highlight_start":1,"highlight_end":42},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    ($($x:expr),+ $(,)?) => (","highlight_start":1,"highlight_end":30},{"text":"        <[_]>::into_vec(box [$($x),+])","highlight_start":1,"highlight_end":39},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0015]\u001b[0m\u001b[0m\u001b[1m: calls in statics are limited to constant functions, tuple structs and tuple variants\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/binary/tests.rs:6:31\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m6\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m    static test_x : Vec<usize> = vec![\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m__________________________________^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        0, 1, 2, 3,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m8\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        4, 5, 6, 7,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        8, 9, 10, 11,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        121, 128, 200, 255\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ];\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|_____^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"aborting due to 27 previous errors; 4 warnings emitted","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 27 previous errors; 4 warnings emitted\u001b[0m\n\n"}
{"message":"Some errors have detailed explanations: E0010, E0015, E0019.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mSome errors have detailed explanations: E0010, E0015, E0019.\u001b[0m\n"}
{"message":"For more information about an error, try `rustc --explain E0010`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about an error, try `rustc --explain E0010`.\u001b[0m\n"}
